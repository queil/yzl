{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yzl - YAML Zero-Language - F# DSL for YAML","text":"<p>Yzl (pronounced easel) stands for YAML Zero-Language. It's an experimental pragmatic template-less approach to YAML generation powered by F#. It provides primitives (functions and operators) for string-less (almost) idiomatic YAML generation. It's an alternative to YAML templating engines. Yzl supports most common YAML features although it doesn't have an ambition to fully support the YAML specification. So if any feature is missing - open a GitHub issue.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ol> <li>Reference the Yzl NuGet package</li> <li>Open <code>Yzl</code></li> <li>Start writing your YAML</li> </ol>"},{"location":"#examples","title":"Examples","text":""},{"location":"#map","title":"Map","text":"<pre><code>open Yzl\n\nlet test = Yzl.boolean\n\ntest true |&gt; Yzl.render\n</code></pre> <pre><code>test: true\n</code></pre>"},{"location":"#sequence","title":"Sequence","text":"<pre><code>[ \"a\"; \"b\"; \"c\" ] |&gt; Yzl.render\n</code></pre> <pre><code>- a\n- b\n- c\n</code></pre>"},{"location":"#nesting","title":"Nesting","text":"<pre><code>let rootMap = Yzl.map\n\nrootMap [\n  test false\n] |&gt; Yzl.render\n</code></pre> <pre><code>rootMap:\n  test: false\n</code></pre>"},{"location":"#ad-hoc-map","title":"Ad-hoc map","text":"<pre><code>[\n  \"number\" .= 5\n  \"sequence\" .= [\n    938\n    48\n    1\n  ]\n  \"otherKey\" .= [\n    \"float\" .= 1.56\n  ]\n] |&gt; Yzl.render\n</code></pre> <pre><code>number: 5\nsequence:\n- 938\n- 48\n- 1\notherKey:\n  float: 1.56\n</code></pre>"},{"location":"#strings","title":"Strings","text":"<p>Yzl supports different kinds of YAML strings via a set of operators. The convention here is that all the special kinds of strings are prefixed with <code>!</code>.</p> <pre><code>let myString = Yzl.str&lt;Str&gt;\n\n[\n  myString !|-\n    \"\"\"\n    this is some\n      special string\n     with weird\n        indentation\n    \"\"\"\n] |&gt; Yzl.render\n</code></pre> <pre><code>myString: |-\n  this is some\n    special string\n   with weird\n      indentation\n</code></pre>"},{"location":"#dynamic-generation","title":"Dynamic generation","text":"<p>Yzl heavily exploits F# lists which means it is very easy to use list comprehension expressions to dynamically build YAML.</p> <pre><code>let map = [\n  \"one\", 1\n  \"two\", 2\n  \"three\", 3\n]\n\n[\n  for (k, v) in map do\n    k .= v\n] |&gt; Yzl.render\n</code></pre> <pre><code>one: 1\ntwo: 2\nthree: 3\n</code></pre>"},{"location":"#heterogenous-sequence","title":"Heterogenous sequence","text":"<p>Creating a heterogenous sequence requires lifting values of different types to <code>Node</code> with the <code>!</code> custom lifting operator.</p> <pre><code>[\n  ! \"string\"\n  ! 1\n  ! true\n  ! 1.9\n] |&gt; Yzl.render\n</code></pre> <pre><code>- string\n- 1\n- true\n- 1.9\n</code></pre>"},{"location":"#keys-names-with-characters-invalid-in-f-identifiers","title":"Keys names with characters invalid in F# identifiers","text":"<p>Sometimes YAML key names are not valid identifiers in F#. In such a case we can just use standard F# escape characters <code>``</code>.</p> <pre><code>let ``app.kubernetes.io/component`` = Yzl.str&lt;string&gt;\n\n[\n  ``app.kubernetes.io/component`` \"my-component\"\n] |&gt; Yzl.render\n</code></pre> <pre><code>app.kubernetes.io/component: my-component\n</code></pre>"},{"location":"#annotating-types","title":"Annotating types","text":"<p>Sometimes, especially when using Yzl.seq, you don't want to depend on the compiler to infer what type should be used. Or maybe you test things out in F# interactive where the compiler often lacks the context to infer the types you intended.</p> <pre><code>// this line on its own won't work in F# interactive\nlet mySeq = Yzl.seq\n\n// this one will\nlet mySeq = Yzl.seq&lt;int&gt;\n\n// also if you paste these two lines in one go it will work as the compiler has enough context to infer int\nlet mySeq2 = Yzl.seq\nmySeq2 [1; 2; 3] |&gt; Yzl.render\n</code></pre> <p>The same also applies to strings.</p> <p>A node intended to use with plain strings:</p> <pre><code>let myPlainString = Yzl.str&lt;string&gt;\n</code></pre> <p>A node intended to be used with more complex strings via the string operators:</p> <pre><code>let description = Yzl.str&lt;Str&gt;\n</code></pre> <p>Automatic inference:</p> <pre><code>// make sure you copy/paste both lines in one go when using F# interactive\n\nlet mySnippet = Yzl.str\n\nmySnippet !&gt;-\n  \"\"\"\n  hello world\n    this is my snippet\n    and it is great\n  \"\"\"\n|&gt; Yzl.render\n</code></pre>"},{"location":"#overriding-the-key-name-inferred-by-the-compiler","title":"Overriding the key name inferred by the compiler","text":"<p>WARNING: this feature should only be used in case where the default key inferred by the compiler is incorrect or in generated code. Otherwise its usage is discouraged.</p> <p>In the previous versions of Yzl the user had to explicitly pass the key name as a string. The latest version uses Compiler Services to retrieve a calling member name and use it as the key name. We can still emulate the old behaviour by passing the key name explicitly:</p> <pre><code>let myKey value = Yzl.map(value, \"I want this to be my key name\")\nmyKey [] |&gt; Yzl.render\n</code></pre> <pre><code>I want this to be my key name: {}\n</code></pre>"},{"location":"#bindings","title":"Bindings","text":"<p>It is an alpha feature where Yzl elements can be generated from a JSON schema so no manual map functions need to be created.</p> <p>Available bindings:</p> <ul> <li>kustomization - Yzl.Bindings.Kustomize</li> </ul> <p>Additional bindings can be generated with Yzl.Bindings.Gen.</p>"},{"location":"contributing/","title":"Yzl - Contributing","text":""},{"location":"contributing/#working-with-docs","title":"Working with docs","text":""},{"location":"contributing/#publish","title":"Publish","text":"<pre><code>./publish-docs.sh\n</code></pre>"},{"location":"contributing/#serve-locally","title":"Serve locally","text":"<pre><code>./serve-docs.sh\n</code></pre>"},{"location":"contributing/#building-api-docs","title":"Building API docs","text":"<p>The docs are built using MkDocs and API Reference is generated with fsdocs.</p> <p>Generating API docs:</p> <pre><code>./build-fsdocs.sh ${ROOT_URL}\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":"<p>You can play with Yzl in <code>dotnet fsi</code>.</p> <p>Run <code>dotnet fsi</code> and reference Yzl NuGet and open the <code>Yzl.Core</code> namespace: <pre><code>#r \"nuget: Yzl\"; open Yzl.Core;;\n</code></pre></p>"},{"location":"tutorial/#the-augmentation-operator","title":"The augmentation operator","text":"<p>Yzl uses <code>!</code> as an operator that augments (or elevates) simple F# types to <code>Yzl.Node</code></p>"},{"location":"tutorial/#scalar","title":"Scalar","text":""},{"location":"tutorial/#yaml","title":"Yaml","text":"<pre><code>5\n</code></pre>"},{"location":"tutorial/#yzl","title":"Yzl","text":"<pre><code>! 5 |&gt; Yzl.render\n</code></pre>"},{"location":"tutorial/#homogenous-sequence","title":"Homogenous sequence","text":""},{"location":"tutorial/#yaml_1","title":"YAML","text":"<pre><code>- 1\n- 2\n- 3\n</code></pre>"},{"location":"tutorial/#yzl_1","title":"Yzl","text":"<p>Common F# lists are rendered as sequences.</p> <pre><code>! [1; 2; 3] |&gt; Yzl.render\n</code></pre>"},{"location":"tutorial/#heterogenous-sequence","title":"Heterogenous sequence","text":""},{"location":"tutorial/#yaml_2","title":"YAML","text":"<pre><code>- true\n- 2.0\n- three\n</code></pre>"},{"location":"tutorial/#yzl_2","title":"Yzl","text":"<p>To render a heterogenous sequence every element must be preceded by the augmentation operator (<code>!</code>)</p> <pre><code>! [ ! true; ! 2.0; ! \"three\"] |&gt; Yzl.render\n</code></pre>"},{"location":"tutorial/#named-value-key-value-pair","title":"Named value (key-value pair)","text":""},{"location":"tutorial/#yaml_3","title":"YAML","text":"<pre><code>language: F#\n</code></pre>"},{"location":"tutorial/#yzl_3","title":"Yzl","text":"<pre><code>let language (x:string) = Yzl.str \"language\" x;;\n! (language \"F#\" ) |&gt; Yzl.render;;\n</code></pre> <p>In a non-interactive context the first line of the above can be simplified to:</p> <pre><code>let language = Yzl.str \"language\"\n</code></pre>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#available-namespaces","title":"Available Namespaces","text":"<ul> <li>Yzl - </li> </ul> <p>Yzl.Bindings.Kustomize - </p>"},{"location":"reference/yzl-bindings-kustomize-common/","title":"Yzl bindings kustomize common","text":""},{"location":"reference/yzl-bindings-kustomize-common/#common-type","title":"Common Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>Common tags</p>"},{"location":"reference/yzl-bindings-kustomize-common/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Common()</code> Returns: <code>Common</code>"},{"location":"reference/yzl-bindings-kustomize-common/#static-members","title":"Static members","text":"Static member Description Source     <code>Common.Default</code> Returns: <code>Common</code>     <code>Common.KVSources(value)</code> Parametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Common.<code>namespace</code>(value)</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.<code>namespace</code>(value)</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.<code>type</code>(value)</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.<code>type</code>(value)</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.annotations value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Common.apiVersion value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.apiVersion value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.behavior value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.env value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.env value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.envs value</code> Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Common.files value</code> Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Common.group value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.group value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.kind value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.kind value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.labels value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Common.literals value</code> Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Common.name value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.name value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.options value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Common.path value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.path value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.target value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Common.version value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Common.version value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Common.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-configmapargs/","title":"Yzl bindings kustomize configmapargs","text":""},{"location":"reference/yzl-bindings-kustomize-configmapargs/#configmapargs-type","title":"ConfigMapArgs Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>ConfigMapArgs contains the metadata of how to generate a configmap</p>"},{"location":"reference/yzl-bindings-kustomize-configmapargs/#constructors","title":"Constructors","text":"Constructor Description Source     <code>ConfigMapArgs()</code> Returns: <code>ConfigMapArgs</code>"},{"location":"reference/yzl-bindings-kustomize-configmapargs/#static-members","title":"Static members","text":"Static member Description Source     <code>ConfigMapArgs.Default</code> Returns: <code>ConfigMapArgs</code>     <code>ConfigMapArgs.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-fieldselector/","title":"Yzl bindings kustomize fieldselector","text":""},{"location":"reference/yzl-bindings-kustomize-fieldselector/#fieldselector-type","title":"FieldSelector Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>Contains the fieldPath to an object field</p>"},{"location":"reference/yzl-bindings-kustomize-fieldselector/#constructors","title":"Constructors","text":"Constructor Description Source     <code>FieldSelector()</code> Returns: <code>FieldSelector</code>"},{"location":"reference/yzl-bindings-kustomize-fieldselector/#static-members","title":"Static members","text":"Static member Description Source     <code>FieldSelector.Default</code> Returns: <code>FieldSelector</code>     <code>FieldSelector.fieldpath value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>FieldSelector.fieldpath value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>FieldSelector.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-fieldspec/","title":"Yzl bindings kustomize fieldspec","text":""},{"location":"reference/yzl-bindings-kustomize-fieldspec/#fieldspec-type","title":"FieldSpec Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-fieldspec/#constructors","title":"Constructors","text":"Constructor Description Source     <code>FieldSpec()</code> Returns: <code>FieldSpec</code>"},{"location":"reference/yzl-bindings-kustomize-fieldspec/#static-members","title":"Static members","text":"Static member Description Source     <code>FieldSpec.Default</code> Returns: <code>FieldSpec</code>     <code>FieldSpec.create value</code> Parametersvalue: <code>bool</code>Returns: <code>NamedNode</code>     <code>FieldSpec.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-generatoroptions/","title":"Yzl bindings kustomize generatoroptions","text":""},{"location":"reference/yzl-bindings-kustomize-generatoroptions/#generatoroptions-type","title":"GeneratorOptions Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>GeneratorOptions modify behavior of all ConfigMap and Secret generators</p>"},{"location":"reference/yzl-bindings-kustomize-generatoroptions/#constructors","title":"Constructors","text":"Constructor Description Source     <code>GeneratorOptions()</code> Returns: <code>GeneratorOptions</code>"},{"location":"reference/yzl-bindings-kustomize-generatoroptions/#static-members","title":"Static members","text":"Static member Description Source     <code>GeneratorOptions.Default</code> Returns: <code>GeneratorOptions</code>     <code>GeneratorOptions.disableNameSuffixHash value</code> DisableNameSuffixHash if true disables the default behavior of adding a suffix to the names of generated resources that is a hash of the resource contentsParametersvalue: <code>bool</code>Returns: <code>NamedNode</code>     <code>GeneratorOptions.immutable value</code> Immutable if true add to all generated resourcesParametersvalue: <code>bool</code>Returns: <code>NamedNode</code>     <code>GeneratorOptions.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-helmchart/","title":"Yzl bindings kustomize helmchart","text":""},{"location":"reference/yzl-bindings-kustomize-helmchart/#helmchart-type","title":"HelmChart Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-helmchart/#constructors","title":"Constructors","text":"Constructor Description Source     <code>HelmChart()</code> Returns: <code>HelmChart</code>"},{"location":"reference/yzl-bindings-kustomize-helmchart/#static-members","title":"Static members","text":"Static member Description Source     <code>HelmChart.Default</code> Returns: <code>HelmChart</code>     <code>HelmChart.includeCRDs value</code> Parametersvalue: <code>bool</code>Returns: <code>NamedNode</code>     <code>HelmChart.releaseName value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>HelmChart.releaseName value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>HelmChart.repo value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>HelmChart.repo value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>HelmChart.valuesFile value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>HelmChart.valuesFile value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>HelmChart.valuesInline value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>HelmChart.valuesMerge value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>HelmChart.valuesMerge value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>HelmChart.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-image/","title":"Yzl bindings kustomize image","text":""},{"location":"reference/yzl-bindings-kustomize-image/#image-type","title":"Image Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-image/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Image()</code> Returns: <code>Image</code>"},{"location":"reference/yzl-bindings-kustomize-image/#static-members","title":"Static members","text":"Static member Description Source     <code>Image.Default</code> Returns: <code>Image</code>     <code>Image.digest value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Image.digest value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Image.newName value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Image.newName value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Image.newTag value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Image.newTag value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Image.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-inventory/","title":"Yzl bindings kustomize inventory","text":""},{"location":"reference/yzl-bindings-kustomize-inventory/#inventory-type","title":"Inventory Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>Inventory appends an object that contains the record of all other objects, which can be used in apply, prune and delete</p>"},{"location":"reference/yzl-bindings-kustomize-inventory/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Inventory()</code> Returns: <code>Inventory</code>"},{"location":"reference/yzl-bindings-kustomize-inventory/#static-members","title":"Static members","text":"Static member Description Source     <code>Inventory.Default</code> Returns: <code>Inventory</code>     <code>Inventory.configMap value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Inventory.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-kustomization/","title":"Yzl bindings kustomize kustomization","text":""},{"location":"reference/yzl-bindings-kustomize-kustomization/#kustomization-type","title":"Kustomization Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-kustomization/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Kustomization()</code> Returns: <code>Kustomization</code>"},{"location":"reference/yzl-bindings-kustomize-kustomization/#static-members","title":"Static members","text":"Static member Description Source     <code>Kustomization.Default</code> Returns: <code>Kustomization</code>     <code>Kustomization.bases value</code> DEPRECATED. Bases are relative paths or git repository URLs specifying a directory containing a kustomization.yaml file.Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.buildMetadata value</code> BuildMetadata is a list of strings used to toggle different build optionsParametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.commonAnnotations value</code> CommonAnnotations to add to all objectsParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.commonLabels value</code> CommonLabels to add to all objects and selectorsParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.components value</code> Components are relative paths or git repository URLs specifying a directory containing a kustomization.yaml file of Kind Component.Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.configMapGenerator value</code> ConfigMapGenerator is a list of configmaps to generate from local data (one configMap per list item)Parametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.configurations value</code> Configurations is a list of transformer configuration filesParametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.crds value</code> Crds specifies relative paths to Custom Resource Definition files. This allows custom resources to be recognized as operands, making it possible to add them to the Resources list. CRDs themselves are not modified.Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.generatorOptions value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.generators value</code> Generators is a list of files containing custom generatorsParametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.helmCharts value</code> HelmCharts is a list of helm chart configuration instancesParametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.helmGlobals value</code> HelmGlobals contains helm configuration that isn't chart specificParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.images value</code> Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.Parametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.inventory value</code> Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.labels value</code> Labels to add to all objects but not selectorsParametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.metadata value</code> Contains metadata about a ResourceParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.namePrefix value</code> NamePrefix will prefix the names of all resources mentioned in the kustomization file including generated configmaps and secretsParametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Kustomization.namePrefix value</code> NamePrefix will prefix the names of all resources mentioned in the kustomization file including generated configmaps and secretsParametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Kustomization.nameSuffix value</code> NameSuffix will suffix the names of all resources mentioned in the kustomization file including generated configmaps and secretsParametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>Kustomization.nameSuffix value</code> NameSuffix will suffix the names of all resources mentioned in the kustomization file including generated configmaps and secretsParametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>Kustomization.openapi value</code> OpenAPI contains information about what kubernetes schema to useParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Kustomization.patches value</code> Apply a patch to multiple resourcesParametersvalue: <code>Node list</code>Returns: <code>NamedNode</code>     <code>Kustomization.patchesJson6902 value</code> JSONPatches is a list of JSONPatch for applying JSON patch. See http://jsonpatch.comParametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.patchesStrategicMerge value</code> PatchesStrategicMerge specifies the relative path to a file containing a strategic merge patch. URLs and globs are not supportedParametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.replacements value</code> Substitute field(s) in N target(s) with a field from a sourceParametersvalue: <code>Node list</code>Returns: <code>NamedNode</code>     <code>Kustomization.replicas value</code> Replicas is a list of (resource name, count) for changing number of replicas for a resources. It will match any group and kind that has a matching name and that is one of: Deployment, ReplicationController, Replicaset, Statefulset.Parametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.resources value</code> Resources specifies relative paths to files holding YAML representations of kubernetes API objects. URLs and globs not supported.Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.secretGenerator value</code> SecretGenerator is a list of secrets to generate from local data (one secret per list item)Parametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.transformers value</code> Transformers is a list of files containing transformersParametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.validators value</code> Validators is a list of files containing validatorsParametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>Kustomization.vars value</code> Allows things modified by kustomize to be injected into a container specification. A var is a name (e.g. FOO) associated with a field in a specific resource instance.  The field must contain a value of type string, and defaults to the name field of the instanceParametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Kustomization.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-kvsource/","title":"Yzl bindings kustomize kvsource","text":""},{"location":"reference/yzl-bindings-kustomize-kvsource/#kvsource-type","title":"KVSource Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-kvsource/#constructors","title":"Constructors","text":"Constructor Description Source     <code>KVSource()</code> Returns: <code>KVSource</code>"},{"location":"reference/yzl-bindings-kustomize-kvsource/#static-members","title":"Static members","text":"Static member Description Source     <code>KVSource.Default</code> Returns: <code>KVSource</code>     <code>KVSource.args value</code> Parametersvalue: <code>string list</code>Returns: <code>NamedNode</code>     <code>KVSource.pluginType value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>KVSource.pluginType value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>KVSource.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-labels/","title":"Yzl bindings kustomize labels","text":""},{"location":"reference/yzl-bindings-kustomize-labels/#labels-type","title":"Labels Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-labels/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Labels()</code> Returns: <code>Labels</code>"},{"location":"reference/yzl-bindings-kustomize-labels/#static-members","title":"Static members","text":"Static member Description Source     <code>Labels.Default</code> Returns: <code>Labels</code>     <code>Labels.fields value</code> FieldSpec completely specifies a kustomizable field in a k8s API object. It helps define the operands of transformationsParametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>Labels.includeSelectors value</code> IncludeSelectors inidicates should transformer include the fieldSpecs for selectorsParametersvalue: <code>bool</code>Returns: <code>NamedNode</code>     <code>Labels.includeTemplates value</code> IncludeTemplates inidicates should transformer include the template labelsParametersvalue: <code>bool</code>Returns: <code>NamedNode</code>     <code>Labels.pairs value</code> Pairs contains the key-value pairs for labels to addParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Labels.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-metadata/","title":"Yzl bindings kustomize metadata","text":""},{"location":"reference/yzl-bindings-kustomize-metadata/#metadata-type","title":"Metadata Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-metadata/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Metadata()</code> Returns: <code>Metadata</code>"},{"location":"reference/yzl-bindings-kustomize-metadata/#static-members","title":"Static members","text":"Static member Description Source     <code>Metadata.Default</code> Returns: <code>Metadata</code>     <code>Metadata.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-nameargs/","title":"Yzl bindings kustomize nameargs","text":""},{"location":"reference/yzl-bindings-kustomize-nameargs/#nameargs-type","title":"NameArgs Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-nameargs/#constructors","title":"Constructors","text":"Constructor Description Source     <code>NameArgs()</code> Returns: <code>NameArgs</code>"},{"location":"reference/yzl-bindings-kustomize-nameargs/#static-members","title":"Static members","text":"Static member Description Source     <code>NameArgs.Default</code> Returns: <code>NameArgs</code>     <code>NameArgs.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-patchesinlinepatch/","title":"Yzl bindings kustomize patchesinlinepatch","text":""},{"location":"reference/yzl-bindings-kustomize-patchesinlinepatch/#patchesinlinepatch-type","title":"PatchesInlinePatch Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-patchesinlinepatch/#constructors","title":"Constructors","text":"Constructor Description Source     <code>PatchesInlinePatch()</code> Returns: <code>PatchesInlinePatch</code>"},{"location":"reference/yzl-bindings-kustomize-patchesinlinepatch/#static-members","title":"Static members","text":"Static member Description Source     <code>PatchesInlinePatch.Default</code> Returns: <code>PatchesInlinePatch</code>     <code>PatchesInlinePatch.patch value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>PatchesInlinePatch.patch value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>PatchesInlinePatch.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-patchespatchpath/","title":"Yzl bindings kustomize patchespatchpath","text":""},{"location":"reference/yzl-bindings-kustomize-patchespatchpath/#patchespatchpath-type","title":"PatchesPatchPath Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-patchespatchpath/#constructors","title":"Constructors","text":"Constructor Description Source     <code>PatchesPatchPath()</code> Returns: <code>PatchesPatchPath</code>"},{"location":"reference/yzl-bindings-kustomize-patchespatchpath/#static-members","title":"Static members","text":"Static member Description Source     <code>PatchesPatchPath.Default</code> Returns: <code>PatchesPatchPath</code>     <code>PatchesPatchPath.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-patchjson6902/","title":"Yzl bindings kustomize patchjson6902","text":""},{"location":"reference/yzl-bindings-kustomize-patchjson6902/#patchjson6902-type","title":"PatchJson6902 Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-patchjson6902/#constructors","title":"Constructors","text":"Constructor Description Source     <code>PatchJson6902()</code> Returns: <code>PatchJson6902</code>"},{"location":"reference/yzl-bindings-kustomize-patchjson6902/#static-members","title":"Static members","text":"Static member Description Source     <code>PatchJson6902.Default</code> Returns: <code>PatchJson6902</code>     <code>PatchJson6902.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-patchtarget/","title":"Yzl bindings kustomize patchtarget","text":""},{"location":"reference/yzl-bindings-kustomize-patchtarget/#patchtarget-type","title":"PatchTarget Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-patchtarget/#constructors","title":"Constructors","text":"Constructor Description Source     <code>PatchTarget()</code> Returns: <code>PatchTarget</code>"},{"location":"reference/yzl-bindings-kustomize-patchtarget/#static-members","title":"Static members","text":"Static member Description Source     <code>PatchTarget.Default</code> Returns: <code>PatchTarget</code>     <code>PatchTarget.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-patchtargetoptional/","title":"Yzl bindings kustomize patchtargetoptional","text":""},{"location":"reference/yzl-bindings-kustomize-patchtargetoptional/#patchtargetoptional-type","title":"PatchTargetOptional Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-patchtargetoptional/#constructors","title":"Constructors","text":"Constructor Description Source     <code>PatchTargetOptional()</code> Returns: <code>PatchTargetOptional</code>"},{"location":"reference/yzl-bindings-kustomize-patchtargetoptional/#static-members","title":"Static members","text":"Static member Description Source     <code>PatchTargetOptional.Default</code> Returns: <code>PatchTargetOptional</code>     <code>PatchTargetOptional.annotationSelector value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>PatchTargetOptional.annotationSelector value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>PatchTargetOptional.labelSelector value</code> Parametersvalue: <code>Str</code>Returns: <code>NamedNode</code>     <code>PatchTargetOptional.labelSelector value</code> Parametersvalue: <code>string</code>Returns: <code>NamedNode</code>     <code>PatchTargetOptional.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-replacementsinline/","title":"Yzl bindings kustomize replacementsinline","text":""},{"location":"reference/yzl-bindings-kustomize-replacementsinline/#replacementsinline-type","title":"ReplacementsInline Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-replacementsinline/#constructors","title":"Constructors","text":"Constructor Description Source     <code>ReplacementsInline()</code> Returns: <code>ReplacementsInline</code>"},{"location":"reference/yzl-bindings-kustomize-replacementsinline/#static-members","title":"Static members","text":"Static member Description Source     <code>ReplacementsInline.Default</code> Returns: <code>ReplacementsInline</code>     <code>ReplacementsInline.source value</code> The source of the valueParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>ReplacementsInline.targets value</code> The N fields to write the value toParametersvalue: <code>NamedNode list list</code>Returns: <code>NamedNode</code>     <code>ReplacementsInline.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-replacementspath/","title":"Yzl bindings kustomize replacementspath","text":""},{"location":"reference/yzl-bindings-kustomize-replacementspath/#replacementspath-type","title":"ReplacementsPath Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-replacementspath/#constructors","title":"Constructors","text":"Constructor Description Source     <code>ReplacementsPath()</code> Returns: <code>ReplacementsPath</code>"},{"location":"reference/yzl-bindings-kustomize-replacementspath/#static-members","title":"Static members","text":"Static member Description Source     <code>ReplacementsPath.Default</code> Returns: <code>ReplacementsPath</code>     <code>ReplacementsPath.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-replicas/","title":"Yzl bindings kustomize replicas","text":""},{"location":"reference/yzl-bindings-kustomize-replicas/#replicas-type","title":"Replicas Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-replicas/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Replicas()</code> Returns: <code>Replicas</code>"},{"location":"reference/yzl-bindings-kustomize-replicas/#static-members","title":"Static members","text":"Static member Description Source     <code>Replicas.Default</code> Returns: <code>Replicas</code>     <code>Replicas.count value</code> Parametersvalue: <code>float</code>Returns: <code>NamedNode</code>     <code>Replicas.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-secretargs/","title":"Yzl bindings kustomize secretargs","text":""},{"location":"reference/yzl-bindings-kustomize-secretargs/#secretargs-type","title":"SecretArgs Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>SecretArgs contains the metadata of how to generate a secret</p>"},{"location":"reference/yzl-bindings-kustomize-secretargs/#constructors","title":"Constructors","text":"Constructor Description Source     <code>SecretArgs()</code> Returns: <code>SecretArgs</code>"},{"location":"reference/yzl-bindings-kustomize-secretargs/#static-members","title":"Static members","text":"Static member Description Source     <code>SecretArgs.Default</code> Returns: <code>SecretArgs</code>     <code>SecretArgs.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-target/","title":"Yzl bindings kustomize target","text":""},{"location":"reference/yzl-bindings-kustomize-target/#target-type","title":"Target Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-bindings-kustomize-target/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Target()</code> Returns: <code>Target</code>"},{"location":"reference/yzl-bindings-kustomize-target/#static-members","title":"Static members","text":"Static member Description Source     <code>Target.Default</code> Returns: <code>Target</code>     <code>Target.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize-var/","title":"Yzl bindings kustomize var","text":""},{"location":"reference/yzl-bindings-kustomize-var/#var-type","title":"Var Type","text":"<p>Namespace: Yzl.Bindings.Kustomize</p> <p>Assembly: Yzl.Bindings.Kustomize.dll</p> <p>Base Type: <code>obj</code></p> <p>Represents a variable whose value will be sourced from a field in a Kubernetes object.</p>"},{"location":"reference/yzl-bindings-kustomize-var/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Var()</code> Returns: <code>Var</code>"},{"location":"reference/yzl-bindings-kustomize-var/#static-members","title":"Static members","text":"Static member Description Source     <code>Var.Default</code> Returns: <code>Var</code>     <code>Var.fieldref value</code> Refers to the field of the object referred to by objref whose value will be extracted for use in replacing $(FOO)Parametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Var.objref value</code> Refers to a Kubernetes resource under the purview of this kustomizationParametersvalue: <code>NamedNode list</code>Returns: <code>NamedNode</code>     <code>Var.yzl build</code> Parametersbuild: <code>NamedNode list</code>Returns: <code>Node</code>"},{"location":"reference/yzl-bindings-kustomize/","title":"Yzl bindings kustomize","text":""},{"location":"reference/yzl-bindings-kustomize/#yzlbindingskustomize-namespace","title":"Yzl.Bindings.Kustomize Namespace","text":"Type Description Source     Common Common tags     ConfigMapArgs ConfigMapArgs contains the metadata of how to generate a configmap     FieldSelector Contains the fieldPath to an object field     FieldSpec       GeneratorOptions GeneratorOptions modify behavior of all ConfigMap and Secret generators     HelmChart       Image       Inventory Inventory appends an object that contains the record of all other objects, which can be used in apply, prune and delete     Kustomization       KVSource       Labels       Metadata       NameArgs       PatchesInlinePatch       PatchesPatchPath       PatchJson6902       PatchTarget       PatchTargetOptional       ReplacementsInline       ReplacementsPath       Replicas       SecretArgs SecretArgs contains the metadata of how to generate a secret     Target       Var Represents a variable whose value will be sourced from a field in a Kubernetes object."},{"location":"reference/yzl-core-name/","title":"Yzl core name","text":""},{"location":"reference/yzl-core-name/#name-type","title":"Name Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Core</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Name&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Name&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>Represents the key in a YAML key-value pair</p>"},{"location":"reference/yzl-core-name/#union-cases","title":"Union cases","text":"Union case Description Source     <code>Name name</code> Parametersname: <code>string</code>"},{"location":"reference/yzl-core-namednode/","title":"Yzl core namednode","text":""},{"location":"reference/yzl-core-namednode/#namednode-type","title":"NamedNode Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Core</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;NamedNode&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;NamedNode&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML key-value pair</p>"},{"location":"reference/yzl-core-namednode/#union-cases","title":"Union cases","text":"Union case Description Source     <code>Named(name, node)</code> Parametersname: <code>Name</code>node: <code>Node</code>"},{"location":"reference/yzl-core-node/","title":"Yzl core node","text":""},{"location":"reference/yzl-core-node/#node-type","title":"Node Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Core</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Node&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Node&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML node types</p>"},{"location":"reference/yzl-core-node/#union-cases","title":"Union cases","text":"Union case Description Source     <code>MapNode NamedNode list</code> YAML mappingParametersItem: <code>NamedNode list</code>    <code>NoNode</code> Node with no representation    <code>Scalar Scalar</code> YAML scalarParametersItem: <code>Scalar</code>    <code>SeqNode Node list</code> YAML sequenceParametersItem: <code>Node list</code>"},{"location":"reference/yzl-core-node/#static-members","title":"Static members","text":"Static member Description Source     <code>Node.ToYzl(source)</code> Parameterssource: <code>NamedNode</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>Node</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>string list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>bool list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>double list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>int list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>NamedNode list list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>NamedNode list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>Node list</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>Str</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>string</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>bool</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>double</code>Returns: <code>Node</code>    <code>Node.ToYzl(source)</code> Parameterssource: <code>int</code>Returns: <code>Node</code>"},{"location":"reference/yzl-core-operators/","title":"Yzl core operators","text":""},{"location":"reference/yzl-core-operators/#operators-module","title":"Operators Module","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p>"},{"location":"reference/yzl-core-operators/#functions-and-values","title":"Functions and values","text":"Function or value Description Source     <code>!a</code> Lift to Yzl NodeParametersa: <code>^a</code>Returns: <code>Node</code>    <code>!!a</code> Lift to Yzl Node listParametersa: <code>^a list</code>Returns: <code>Node list</code>    <code>!&gt;value</code> Folded stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!&gt;+value</code> Folded keep stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!&gt;-value</code> Folded strip stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!|value</code> Literal stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!|+value</code> Literal keep stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!|-value</code> Literal strip stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>name .= value</code> Operator for ad-hoc maps creation.Parametersname: <code>string</code>value: <code>^a</code>Returns: <code>NamedNode</code>"},{"location":"reference/yzl-core-scalar/","title":"Yzl core scalar","text":""},{"location":"reference/yzl-core-scalar/#scalar-type","title":"Scalar Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Core</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Scalar&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Scalar&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML scalar types</p>"},{"location":"reference/yzl-core-scalar/#union-cases","title":"Union cases","text":"Union case Description Source     <code>Bool bool</code> ParametersItem: <code>bool</code>    <code>Float double</code> ParametersItem: <code>double</code>    <code>Int int</code> ParametersItem: <code>int</code>    <code>Str Str</code> ParametersItem: <code>Str</code>"},{"location":"reference/yzl-core-str/","title":"Yzl core str","text":""},{"location":"reference/yzl-core-str/#str-type","title":"Str Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Core</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Str&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Str&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML string types</p>"},{"location":"reference/yzl-core-str/#union-cases","title":"Union cases","text":"Union case Description Source     <code>DoubleQuoted string</code> YAML double-quoted stringParametersItem: <code>string</code>    <code>Folded string</code> YAML &gt; stringParametersItem: <code>string</code>    <code>FoldedKeep string</code> YAML &gt;+ stringParametersItem: <code>string</code>    <code>FoldedStrip string</code> YAML &gt;- stringParametersItem: <code>string</code>    <code>Literal string</code> YAML | stringParametersItem: <code>string</code>    <code>LiteralKeep string</code> YAML |+ stringParametersItem: <code>string</code>    <code>LiteralStrip string</code> YAML |- stringParametersItem: <code>string</code>    <code>Plain string</code> YAML plain stringParametersItem: <code>string</code>    <code>SingleQuoted string</code> YAML single-quoted stringParametersItem: <code>string</code>"},{"location":"reference/yzl-core-str/#static-members","title":"Static members","text":"Static member Description Source     <code>Str.ToYzlString(source)</code> Parameterssource: <code>string</code>Returns: <code>Str</code>    <code>Str.ToYzlString(source)</code> Parameterssource: <code>Str</code>Returns: <code>Str</code>"},{"location":"reference/yzl-core-yzl-builder/","title":"Yzl core yzl builder","text":""},{"location":"reference/yzl-core-yzl-builder/#yzlbuilder-type","title":"Yzl.Builder Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-core-yzl-builder/#constructors","title":"Constructors","text":"Constructor Description Source     <code>Builder()</code> Returns: <code>Builder</code>"},{"location":"reference/yzl-core-yzl-builder/#static-members","title":"Static members","text":"Static member Description Source     <code>Builder.boolean value</code> Creates a named boolean scalar nodeParametersvalue: <code>bool</code>Returns: <code>string -&gt; NamedNode</code>    <code>Builder.float value</code> Creates a named float scalar nodeParametersvalue: <code>float</code>Returns: <code>string -&gt; NamedNode</code>    <code>Builder.int value</code> Creates a named integer scalar nodeParametersvalue: <code>int</code>Returns: <code>string -&gt; NamedNode</code>    <code>Builder.map value</code> Creates a named map nodeParametersvalue: <code>NamedNode list</code>Returns: <code>string -&gt; NamedNode</code>    <code>Builder.named name node</code> Parametersname: <code>string</code>node: <code>Node</code>Returns: <code>NamedNode</code>    <code>Builder.none </code> Creates an empty node  Typically used when generating YAML tree conditionally to indicate no node should be generatedReturns: <code>NamedNode</code>    <code>Builder.seq seq</code> Creates a named sequence nodeParametersseq: <code>Node list</code>Returns: <code>string -&gt; NamedNode</code>    <code>Builder.str value</code> Creates a named string scalar node from StrParametersvalue: <code>Str</code>Returns: <code>string -&gt; NamedNode</code>    <code>Builder.str value</code> Creates a named string scalar node from F# stringParametersvalue: <code>string</code>Returns: <code>string -&gt; NamedNode</code>"},{"location":"reference/yzl-core-yzl-name/","title":"Yzl core yzl name","text":""},{"location":"reference/yzl-core-yzl-name/#yzlname-type","title":"Yzl.Name Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Name&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Name&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>Represents the key in a YAML key-value pair</p>"},{"location":"reference/yzl-core-yzl-name/#union-cases","title":"Union cases","text":"Union case Description Source     <code>Name name</code> Parametersname: <code>string</code>"},{"location":"reference/yzl-core-yzl-namednode/","title":"Yzl core yzl namednode","text":""},{"location":"reference/yzl-core-yzl-namednode/#yzlnamednode-type","title":"Yzl.NamedNode Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;NamedNode&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;NamedNode&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML key-value pair</p>"},{"location":"reference/yzl-core-yzl-namednode/#union-cases","title":"Union cases","text":"Union case Description Source     <code>Named(name, node)</code> Parametersname: <code>Name</code>node: <code>Node</code>"},{"location":"reference/yzl-core-yzl-node/","title":"Yzl core yzl node","text":""},{"location":"reference/yzl-core-yzl-node/#yzlnode-type","title":"Yzl.Node Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Node&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Node&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML node types</p>"},{"location":"reference/yzl-core-yzl-node/#union-cases","title":"Union cases","text":"Union case Description Source     <code>MapNode NamedNode list</code> YAML mappingParametersItem: <code>NamedNode list</code>    <code>NoNode</code> Node with no representation    <code>Scalar Scalar</code> YAML scalarParametersItem: <code>Scalar</code>    <code>SeqNode Node list</code> YAML sequenceParametersItem: <code>Node list</code>"},{"location":"reference/yzl-core-yzl-node/#static-members","title":"Static members","text":"Static member Description Source     <code>op_Implicitsource</code> Parameterssource: <code>NamedNode</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>Node</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>string list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>bool list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>double list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>int list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>NamedNode list list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>NamedNode list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>Node list</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>Str</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>string</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>bool</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>double</code>Returns: <code>Node</code>    <code>op_Implicitsource</code> Parameterssource: <code>int</code>Returns: <code>Node</code>"},{"location":"reference/yzl-core-yzl-renderoptions/","title":"Yzl core yzl renderoptions","text":""},{"location":"reference/yzl-core-yzl-renderoptions/#yzlrenderoptions-type","title":"Yzl.RenderOptions Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;RenderOptions&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;RenderOptions&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML rendering options</p>"},{"location":"reference/yzl-core-yzl-renderoptions/#record-fields","title":"Record fields","text":"Record Field Description Source     <code>indentSpaces</code> Specifies how many spaces are used as indentation in the output YAML Default: <code>2</code>    <code>multiLineRelativeIndent</code> If set to true the indent of multi-line strings is calculated against the parent YAML node and excessive leading spaces get collapsed Default: <code>true</code>"},{"location":"reference/yzl-core-yzl-renderoptions/#static-members","title":"Static members","text":"Static member Description Source     <code>RenderOptions.Default</code> Default render optionsReturns: <code>RenderOptions</code>"},{"location":"reference/yzl-core-yzl-scalar/","title":"Yzl core yzl scalar","text":""},{"location":"reference/yzl-core-yzl-scalar/#yzlscalar-type","title":"Yzl.Scalar Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Scalar&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Scalar&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML scalar types</p>"},{"location":"reference/yzl-core-yzl-scalar/#union-cases","title":"Union cases","text":"Union case Description Source     <code>Bool bool</code> ParametersItem: <code>bool</code>    <code>Float double</code> ParametersItem: <code>double</code>    <code>Int int</code> ParametersItem: <code>int</code>    <code>Str Str</code> ParametersItem: <code>Str</code>"},{"location":"reference/yzl-core-yzl-str/","title":"Yzl core yzl str","text":""},{"location":"reference/yzl-core-yzl-str/#yzlstr-type","title":"Yzl.Str Type","text":"<p>Namespace: Yzl.Core</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Yzl</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;Str&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;Str&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML string types</p>"},{"location":"reference/yzl-core-yzl-str/#union-cases","title":"Union cases","text":"Union case Description Source     <code>DoubleQuoted string</code> YAML double-quoted stringParametersItem: <code>string</code>    <code>Folded string</code> YAML &gt; stringParametersItem: <code>string</code>    <code>FoldedKeep string</code> YAML &gt;+ stringParametersItem: <code>string</code>    <code>FoldedStrip string</code> YAML &gt;- stringParametersItem: <code>string</code>    <code>Literal string</code> YAML | stringParametersItem: <code>string</code>    <code>LiteralKeep string</code> YAML |+ stringParametersItem: <code>string</code>    <code>LiteralStrip string</code> YAML |- stringParametersItem: <code>string</code>    <code>Plain string</code> YAML plain stringParametersItem: <code>string</code>    <code>SingleQuoted string</code> YAML single-quoted stringParametersItem: <code>string</code>"},{"location":"reference/yzl-core-yzl-str/#static-members","title":"Static members","text":"Static member Description Source     <code>op_Implicitsource</code> Parameterssource: <code>Str</code>Returns: <code>Str</code>    <code>op_Implicitsource</code> Parameterssource: <code>string</code>Returns: <code>Str</code>"},{"location":"reference/yzl-core-yzl/","title":"Yzl core yzl","text":""},{"location":"reference/yzl-core-yzl/#yzl-type","title":"Yzl Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Core</p> <p>Base Type: <code>obj</code></p>"},{"location":"reference/yzl-core-yzl/#static-members","title":"Static members","text":"Static member Description Source     <code>Yzl.boolean (value, ?name)</code> Creates a named boolean scalar nodeParametersvalue: <code>bool</code>?name: <code>string</code>Returns: <code>NamedNode</code>    <code>Yzl.float (value, ?name)</code> Creates a named float scalar nodeParametersvalue: <code>float</code>?name: <code>string</code>Returns: <code>NamedNode</code>    <code>Yzl.int (value, ?name)</code> Creates a named integer scalar nodeParametersvalue: <code>int</code>?name: <code>string</code>Returns: <code>NamedNode</code>    <code>Yzl.map (value, ?name)</code> Parametersvalue: <code>NamedNode list</code>?name: <code>string</code>Returns: <code>NamedNode</code>    <code>Yzl.named name node</code> Parametersname: <code>string</code>node: <code>Node</code>Returns: <code>NamedNode</code>    <code>Yzl.none </code> Creates an empty node  Typically used when generating YAML tree conditionally to indicate no node should be generatedReturns: <code>NamedNode</code>    <code>Yzl.seq (value, ?name)</code> Creates a named sequence nodeParametersvalue: <code>^T list</code>?name: <code>string</code>Returns: <code>NamedNode</code>    <code>Yzl.str (value, ?name)</code> Creates a named string scalar node from F# string or Yzl.StrParametersvalue: <code>^T</code>?name: <code>string</code>Returns: <code>NamedNode</code>"},{"location":"reference/yzl-core/","title":"Yzl core","text":""},{"location":"reference/yzl-core/#core-module","title":"Core Module","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p>"},{"location":"reference/yzl-core/#types","title":"Types","text":"Type Description Source     Name Represents the key in a YAML key-value pair    NamedNode YAML key-value pair    Node YAML node types    Scalar YAML scalar types    Str YAML string types    Yzl"},{"location":"reference/yzl-core/#functions-and-values","title":"Functions and values","text":"Function or value Description Source     <code>lift x</code> Lifts a given object to a NodeParametersx: <code>^a</code>Returns: <code>^b</code>    <code>liftMany x</code> Parametersx: <code>^a list</code>Returns: <code>^b list</code>    <code>liftString x</code> Parametersx: <code>^a</code>Returns: <code>^b</code>"},{"location":"reference/yzl-operators/","title":"Yzl operators","text":""},{"location":"reference/yzl-operators/#operators-module","title":"Operators Module","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p>"},{"location":"reference/yzl-operators/#functions-and-values","title":"Functions and values","text":"Function or value Description Source     <code>!a</code> Lift to Yzl NodeParametersa: <code>^a</code>Returns: <code>Node</code>    <code>!&gt;value</code> Folded stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!&gt;+value</code> Folded keep stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!&gt;-value</code> Folded strip stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!|value</code> Literal stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!|+value</code> Literal keep stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>!|-value</code> Literal strip stringParametersvalue: <code>string</code>Returns: <code>Str</code>    <code>name .= value</code> Operator for ad-hoc maps creation.Parametersname: <code>string</code>value: <code>^a</code>Returns: <code>NamedNode</code>"},{"location":"reference/yzl-render-renderoptions/","title":"Yzl render renderoptions","text":""},{"location":"reference/yzl-render-renderoptions/#renderoptions-type","title":"RenderOptions Type","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Render</p> <p>Base Type: <code>obj</code></p> <p>All Interfaces: <code>IEquatable&lt;RenderOptions&gt;</code>, <code>IStructuralEquatable</code>, <code>IComparable&lt;RenderOptions&gt;</code>, <code>IComparable</code>, <code>IStructuralComparable</code></p> <p>YAML rendering options</p>"},{"location":"reference/yzl-render-renderoptions/#record-fields","title":"Record fields","text":"Record Field Description Source     <code>indentSpaces</code> Specifies how many spaces are used as indentation in the output YAML Default: <code>2</code>Field type: <code>int</code>    <code>multiLineRelativeIndent</code> If set to true the indent of multi-line strings is calculated against the parent YAML node and excessive leading spaces get collapsed Default: <code>true</code>Field type: <code>bool</code>"},{"location":"reference/yzl-render-renderoptions/#static-members","title":"Static members","text":"Static member Description Source     <code>RenderOptions.Default</code> Default render optionsReturns: <code>RenderOptions</code>"},{"location":"reference/yzl-render-yzl/","title":"Yzl render yzl","text":""},{"location":"reference/yzl-render-yzl/#yzl-module","title":"Yzl Module","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p> <p>Parent Module: Render</p>"},{"location":"reference/yzl-render-yzl/#functions-and-values","title":"Functions and values","text":"Function or value Description Source     <code>Yzl.render obj</code> Renders Yzl tree into YAML with the default RenderOptionsParametersobj: <code>^a</code>Returns: <code>string</code>ExampleRender an Yzl node: <code>! 5 |&gt; Yzl.render</code>    <code>Yzl.renderYaml opts yaml</code> Renders Yzl tree into YAMLParametersopts: <code>RenderOptions</code>yaml: <code>Node</code>Returns: <code>string</code>"},{"location":"reference/yzl-render/","title":"Yzl render","text":""},{"location":"reference/yzl-render/#render-module","title":"Render Module","text":"<p>Namespace: Yzl</p> <p>Assembly: Yzl.dll</p>"},{"location":"reference/yzl-render/#types-and-nested-modules","title":"Types and nested modules","text":"Type/Module Description Source     Yzl      RenderOptions YAML rendering options"},{"location":"reference/yzl/","title":"Yzl","text":""},{"location":"reference/yzl/#yzl-namespace","title":"Yzl Namespace","text":"Modules Description Source     Core      Operators      Render"}]}